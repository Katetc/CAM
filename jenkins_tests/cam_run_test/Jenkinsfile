pipeline {
  agent any
  stages {
    stage('Check out externals') {
      steps {
        sh 'python manage_externals/checkout_externals -e Externals.cfg'
      }
    }
    stage('Copy Config Files') {
      steps {
        sh '''cp -rf cime_config_cesm_machines_files/config_machines.xml cime/config/cesm/machines/config_machines.xml
              cp -rf cime_config_cesm_machines_files/config_compilers.xml cime/config/cesm/machines/config_compilers.xml'''
      }
    }
    stage('Remove Old Output') {
      steps {
        sh 'rm -rf /home/pub/cam_output'
      }
    }
    stage('Run CAM') {
      steps {
        sh '''source /opt/intel/bin/ifortvars.sh intel64
              run_scripts/run_scam.bash atex'''
      }
    }
  }
  post {
    always {
      cleanWs(cleanWhenSuccess: true, cleanWhenFailure: true)
    }
    failure {
      emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
    }
  }
}
